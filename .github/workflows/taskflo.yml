name: Compliance Email Automation

on:
  schedule:
    # Daily reminders - every day at 6:00 PM UTC (11:00 PM Pakistan Time)
    - cron: '0 18 * * *'
    # Monthly tasks - 1st of every month at 9:00 AM UTC (2:00 PM Pakistan Time)
    - cron: '0 9 1 * *'
    # Quarterly tasks - 25th of quarter-end months (Mar, Jun, Sep, Dec)
    - cron: '0 9 25 3,6,9,12 *'
    # Weekly reminders - every Monday at 9:00 AM UTC (2:00 PM Pakistan Time)
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      schedule_type:
        description: 'Schedule type to run'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - monthly
          - quarterly
          - reminder
      dry_run:
        description: 'Run in dry-run mode (no emails sent)'
        required: false
        default: false
        type: boolean

jobs:
  send-compliance-emails:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas python-dotenv

      - name: Determine schedule type
        id: schedule_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TYPE=${{ github.event.inputs.schedule_type }}" >> $GITHUB_OUTPUT
            echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
          else
            # For scheduled runs, determine type based on cron schedule
            CURRENT_DAY=$(date +%d)
            CURRENT_MONTH=$(date +%m)
            CURRENT_DOW=$(date +%u)  # 1=Monday, 7=Sunday
            
            if [ "${{ github.event.schedule }}" == "0 9 1 * *" ] && [ "$CURRENT_DAY" = "01" ]; then
              echo "TYPE=monthly" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.schedule }}" == "0 9 25 3,6,9,12 *" ] && [ "$CURRENT_DAY" = "25" ] && { [ "$CURRENT_MONTH" = "03" ] || [ "$CURRENT_MONTH" = "06" ] || [ "$CURRENT_MONTH" = "09" ] || [ "$CURRENT_MONTH" = "12" ]; }; then
              echo "TYPE=quarterly" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.schedule }}" == "0 9 * * 1" ] && [ "$CURRENT_DOW" = "1" ]; then
              echo "TYPE=reminder" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.schedule }}" == "0 18 * * *" ]; then
              echo "TYPE=daily" >> $GITHUB_OUTPUT
            else
              echo "TYPE=skip" >> $GITHUB_OUTPUT
            fi
            echo "DRY_RUN=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug environment variables
        run: |
          echo "SMTP_SERVER: ${{ secrets.SMTP_SERVER }}"
          echo "SMTP_PORT: ${{ secrets.SMTP_PORT }}"
          echo "SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}"
          echo "SMTP_PASSWORD exists: ${{ secrets.SMTP_PASSWORD != '' }}"
          echo "Schedule type: ${{ steps.schedule_type.outputs.TYPE }}"
          echo "Dry run: ${{ steps.schedule_type.outputs.DRY_RUN }}"
          echo "Today is: $(date +%Y-%m-%d)"
          echo "Day of week: $(date +%A)"
          echo "Day of month: $(date +%d)"
          echo "Month: $(date +%m)"

      - name: Check database file
        run: |
          if [ ! -f "task_management.db" ]; then
            echo "‚ùå task_management.db not found in current directory!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Database file found: $(du -h task_management.db | cut -f1)"

      - name: Send Compliance Emails
        if: steps.schedule_type.outputs.TYPE != 'skip'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Running for schedule type: ${{ steps.schedule_type.outputs.TYPE }}"
          if [ "${{ steps.schedule_type.outputs.DRY_RUN }}" = "true" ]; then
            echo "üöÄ DRY RUN - No emails will be sent"
            python script.py "${{ steps.schedule_type.outputs.TYPE }}" --dry-run
          else
            echo "üìß LIVE MODE - Emails will be sent"
            python script.py "${{ steps.schedule_type.outputs.TYPE }}"
          fi

      - name: Skip execution message
        if: steps.schedule_type.outputs.TYPE == 'skip'
        run: |
          echo "‚è≠Ô∏è Skipping execution - not the right day for this schedule type"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ github.run_id }}
          path: |
            task_management.db
            script.py
          retention-days: 7

      - name: Success notification
        if: success() && steps.schedule_type.outputs.TYPE != 'skip'
        run: |
          echo "‚úÖ Compliance email automation completed successfully!"
          echo "üìÖ Schedule type: ${{ steps.schedule_type.outputs.TYPE }}"
          echo "üïí Run time: $(date)"